variables:
  buildConfiguration: 'staging'
  service.name: 'monitoringdashboard'
  acr.name: 'vehiclesDashboardRegistry'

jobs:
- job: Angularmonitoringdashboardbuild
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: DeleteFiles@1
    displayName: 'Delete JUnit files'
    inputs:
      SourceFolder: $(System.DefaultWorkingDirectory)/$(service.name)/junit
      Contents: 'TEST*.xml'
  
  - task: Npm@1
    displayName: 'npm install'
    inputs:
      command: install
      workingDir: $(System.DefaultWorkingDirectory)/$(service.name)/
   
  - task: Npm@1
    displayName: 'install bootstrap'
    inputs:
      command: custom
      customCommand: install bootstrap
      workingDir: $(System.DefaultWorkingDirectory)/$(service.name)

  - task: Npm@1
    displayName: 'Build Angular'
    inputs:
      command: custom
      customCommand: run-script build -- --configuration $(buildConfiguration)
      workingDir: $(System.DefaultWorkingDirectory)/$(service.name)

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'dist'
      PathtoPublish: '$(System.DefaultWorkingDirectory)/$(service.name)/dist/'
  
  - task: Npm@1
    displayName: 'Test Angular'
    inputs:
      command: custom
      customCommand: run test -- --watch=false --code-coverage
      workingDir: $(System.DefaultWorkingDirectory)/$(service.name)/
  
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage Angular results'
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/$(service.name)/coverage/cobertura-coverage.xml'
      reportDirectory: $(System.DefaultWorkingDirectory)/$(service.name)/coverage
      failIfCoverageEmpty: false
  
  - task: PublishTestResults@2
    displayName: 'Publish Angular test results'
    condition: succeededOrFailed()
    inputs:
      searchFolder: $(System.DefaultWorkingDirectory)/$(service.name)/junit
      testRunTitle: Angular
      testResultsFormat: JUnit
      testResultsFiles: "**/TESTS*.xml" 
  - task: Npm@1
    displayName: 'E2E Test Angular'
    inputs:
      command: custom
      customCommand: run e2e
      workingDir: $(System.DefaultWorkingDirectory)/$(service.name)
  
  - task: PublishTestResults@2
    displayName: 'Publish Angular E2E test results'
    condition: succeededOrFailed()
    inputs:
      searchFolder: $(System.DefaultWorkingDirectory)/$(service.name)/e2e/junit
      testRunTitle: Angular_E2E
      testResultsFormat: JUnit
      testResultsFiles: "**/junit*.xml"

- job: dockerbuildandpush
  dependsOn: Angularmonitoringdashboardbuild
  condition: succeeded
  displayName: '[dokcer build , push to container container registry]'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'dist'
      downloadPath: '$(System.DefaultWorkingDirectory)/$(service.name)/'
  - task: Docker@2
    displayName: build docker image
    inputs:
      containerRegistry: 'ACR'
      repository: '$(service.name)'
      command: 'build'
      Dockerfile: '$(System.DefaultWorkingDirectory)/$(service.name)/Dockerfile'
      buildContext: '$(System.DefaultWorkingDirectory)/$(service.name)/'
  - task: Docker@2
    displayName: push docker image
    inputs:
      containerRegistry: 'ACR'
      repository: '$(service.name)'
      command: 'push'
- job: helm_package
  dependsOn: dockerbuildandpush
  condition: succeeded
  displayName: '[helm init package deploy to ACR]'
  pool:
    vmImage: 'ubuntu-latest'
  steps:

  - task: HelmDeploy@0
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceConnection: 'AKS'
      command: 'init'
      upgradeTiller: false
      arguments: '--client-only'

  - task: HelmDeploy@0
    displayName: Helm package
    inputs:
      command: package
      chartPath: '$(System.DefaultWorkingDirectory)/$(service.name)/$(service.name)-helm'
      destination: $(Build.ArtifactStagingDirectory)
      chartVersion: $(Build.BuildId)
      arguments: '--app-version $(Build.BuildId)'

  - task: AzureCLI@1
    inputs:
      azureSubscription: 'Free Trial(8d3b52bc-28ad-4afc-97f2-cd46726a2b0e)'
      scriptLocation: 'inlineScript'
      inlineScript: 'az acr helm push $(Build.ArtifactStagingDirectory)/$(service.name)-helm-$(Build.BuildId).tgz --name $(acr.name) --force;'
  